
#the adaptor
source [find interface/ftdi/olimex-arm-usb-tiny-h.cfg ]
transport select jtag

#the taps
jtag newtap stm32f4x cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id 0x4ba00477
jtag newtap stm32f4x bs -irlen 5 -expected-id 0x06413041 -expected-id 0x06419041 -expected-id 0x06423041 -expected-id 0x06433041 -expected-id 0x06431041

# xc3s400, xcf02s
jtag newtap xc3s tap -irlen 6 -expected-id 0x0141c093
jtag newtap xcf0xs flash -irlen 8 -ircapture 0x01 -irmask 0x07 -expected-id 0xd5045093

# xc3s200, xcf01s
#jtag newtap xc3s tap -irlen 6 -expected-id 0x01414093
#jtag newtap xcf0xs flash -irlen 8 -ircapture 0x01 -irmask 0x07  -expected-id 0xd5044093

#some random settings
adapter_khz 2000

#so, for programming we seem to have a few options:
# * use impact to generate a .mcs or .exo file, flash/replay using openocd
# * use impact to generate a .svf(serial vector format) and replay using openocd
# * figure out how to directly program the bitstream. possibly using a generic nand/nor driver? cannot find info on the programming algo...

proc loadconfig {}  {
    irscan xcf0xs.flash 0xee
}

proc flashxsvf {file} {
    xsvf xcf0xs.flash $file
}

#svf targets the whole chain, while xsvf can be directed at a single tap

init
