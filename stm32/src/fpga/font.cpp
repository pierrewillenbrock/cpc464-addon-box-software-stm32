
#include <fpga/font.h>
#include <fpga/fpga_comm.hpp>
#include <fpga/layout.h>
#include <fpga/sprite.h>
#include <map>

static uint8_t const font_desc[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //' '
	0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00, //'!'
	0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
	0x18, 0x3e, 0x58, 0x3c, 0x1a, 0x7c, 0x18, 0x00,
	0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
	0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
	0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
	0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00,
	0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
	0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30,
	0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
	0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
	0x7c, 0xc6, 0xce, 0xd6, 0xe6, 0xc6, 0x7c, 0x00, //'0'
	0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00,
	0x3c, 0x66, 0x06, 0x3c, 0x60, 0x66, 0x7e, 0x00,
	0x3c, 0x66, 0x06, 0x1c, 0x06, 0x66, 0x3c, 0x00,
	0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
	0x7e, 0x62, 0x60, 0x7c, 0x06, 0x66, 0x3c, 0x00,
	0x3c, 0x66, 0x60, 0x7c, 0x66, 0x66, 0x3c, 0x00,
	0x7e, 0x66, 0x06, 0x0c, 0x18, 0x18, 0x18, 0x00,
	0x3c, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x00,
	0x3c, 0x66, 0x66, 0x3e, 0x06, 0x66, 0x3c, 0x00, //'9'
	0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00,
	0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30,
	0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00,
	0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00,
	0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
	0x3c, 0x66, 0x66, 0x0c, 0x18, 0x00, 0x18, 0x00,
	0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x7c, 0x00, //'@'
	0x18, 0x3c, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x00, //'A'
	0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
	0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
	0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
	0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
	0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
	0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
	0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00,
	0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00,
	0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
	0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
	0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
	0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
	0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
	0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
	0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
	0x38, 0x6c, 0xc6, 0xc6, 0xda, 0xcc, 0x76, 0x00,
	0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
	0x3c, 0x66, 0x60, 0x3c, 0x06, 0x66, 0x3c, 0x00,
	0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
	0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
	0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
	0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x00,
	0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00, //'Z'
	0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00,
	0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
	0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00,
	0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
	0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00, //'a'
	0xe0, 0x60, 0x7c, 0x66, 0x66, 0x66, 0xdc, 0x00,
	0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x00,
	0x1c, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
	0x00, 0x00, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
	0x1c, 0x36, 0x30, 0x78, 0x30, 0x30, 0x78, 0x00,
	0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x7c,
	0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
	0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
	0x06, 0x00, 0x0e, 0x06, 0x06, 0x66, 0x66, 0x3c,
	0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
	0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00,
	0x00, 0x00, 0x6c, 0xfe, 0xd6, 0xd6, 0xc6, 0x00,
	0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x00,
	0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00,
	0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
	0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
	0x00, 0x00, 0xdc, 0x76, 0x60, 0x60, 0xf0, 0x00,
	0x00, 0x00, 0x3c, 0x60, 0x3c, 0x06, 0x7c, 0x00,
	0x30, 0x30, 0x7c, 0x30, 0x30, 0x36, 0x1c, 0x00,
	0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00,
	0x00, 0x00, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
	0x00, 0x00, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00,
	0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
	0x00, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x06, 0x7c,
	0x00, 0x00, 0x7e, 0x4c, 0x18, 0x32, 0x7e, 0x00, //'z'
	0x0e, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0e, 0x00,
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
	0x70, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x70, 0x00,
	0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xcc, 0x33, 0xcc, 0x33, 0xcc, 0x33, 0xcc, 0x33,
};

struct ExtraTile {
	wchar_t wc;
	uint8_t bitmap[8];
};

static ExtraTile const extratiles[] = {
	//0x81
	{ L'▘', {0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00} },
	{ L'▝', {0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00} },
	{ L'▀', {0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00} },
	{ L'▖', {0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0} },
	{ L'▌', {0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0} },
	{ L'▞', {0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0} },
	{ L'▛', {0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0} },
	{ L'▗', {0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f} },
	{ L'▚', {0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f} },
	{ L'▐', {0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f} },
	{ L'▜', {0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f} },
	{ L'▄', {0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff} },
	{ L'▙', {0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff} },
	{ L'▟', {0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff} },
	{ L'█', {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff} },

	//0x90
	{ L'·', {0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00} }, //also graphical symbol set, straight lines, only the center dot
	{ L'╹', {0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00} },
	{ L'╺', {0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00} },
	{ L'┗', {0x18, 0x18, 0x18, 0x1f, 0x0f, 0x00, 0x00, 0x00} },
	{ L'╻', {0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18} },
	{ L'┃', {0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18} },
	{ L'┏', {0x00, 0x00, 0x00, 0x0f, 0x1f, 0x18, 0x18, 0x18} },
	{ L'┣', {0x18, 0x18, 0x18, 0x1f, 0x1f, 0x18, 0x18, 0x18} },
	{ L'╸', {0x00, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0x00} },
	{ L'┛', {0x18, 0x18, 0x18, 0xf8, 0xf0, 0x00, 0x00, 0x00} },
	{ L'━', {0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00} },
	{ L'┻', {0x18, 0x18, 0x18, 0xff, 0xff, 0x00, 0x00, 0x00} },
	{ L'┓', {0x00, 0x00, 0x00, 0xf0, 0xf8, 0x18, 0x18, 0x18} },
	{ L'┫', {0x18, 0x18, 0x18, 0xf8, 0xf8, 0x18, 0x18, 0x18} },
	{ L'┳', {0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0x18, 0x18} },
	{ L'╋', {0x18, 0x18, 0x18, 0xff, 0xff, 0x18, 0x18, 0x18} },

	//0xa0
	{ L'＾', {0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00} },
	{ L'´', {0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00} },
	{ L'¨', {0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00} },
	{ L'£', {0x3c, 0x66, 0x60, 0xf8, 0x60, 0x66, 0xfe, 0x00} },
	{ L'©', {0x38, 0x44, 0xba, 0xa2, 0xba, 0x44, 0x38, 0x00} },
	{ L'¶', {0x7e, 0xf4, 0xf4, 0x74, 0x34, 0x34, 0x34, 0x00} },
	{ L'§', {0x1e, 0x30, 0x38, 0x6c, 0x38, 0x18, 0xf0, 0x00} },
	{ L'‛', {0x18, 0x18, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00} },
	{ L'¼', {0x40, 0xc0, 0x44, 0x4c, 0x54, 0x1e, 0x04, 0x00} },
	{ L'½', {0x40, 0xc0, 0x4c, 0x52, 0x44, 0x08, 0x1e, 0x00} },
	{ L'¾', {0xe0, 0x10, 0x62, 0x16, 0xea, 0x0f, 0x02, 0x00} },
	{ L'±', {0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x7e, 0x00} },
	{ L'÷', {0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00} },
	{ L'¬', {0x00, 0x00, 0x00, 0x7e, 0x06, 0x06, 0x00, 0x00} },
	{ L'¿', {0x18, 0x00, 0x18, 0x30, 0x66, 0x66, 0x3c, 0x00} },
	{ L'¡', {0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00} },

	//0xb0
	{ L'α', {0x00, 0x00, 0x73, 0xde, 0xcc, 0xde, 0x73, 0x00} },
	{ L'β', {0x7c, 0xc6, 0xc6, 0xfc, 0xc6, 0xc6, 0xf8, 0xc0} },
	{ L'γ', {0x00, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x00} },
	{ L'δ', {0x3c, 0x60, 0x60, 0x3c, 0x66, 0x66, 0x3c, 0x00} },
	{ L'ε', {0x00, 0x00, 0x1e, 0x30, 0x7c, 0x30, 0x1e, 0x00} },
	{ L'θ', {0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00} },
	{ L'λ', {0x00, 0xc0, 0x60, 0x30, 0x38, 0x6c, 0xc6, 0x00} },
	{ L'µ', {0x00, 0x00, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60} },
	{ L'π', {0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x00} },
	{ L'σ', {0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0x70, 0x00} },
	{ L'φ', {0x03, 0x06, 0x0c, 0x3c, 0x66, 0x3c, 0x60, 0xc0} },
	{ L'ψ', {0x03, 0x06, 0x0c, 0x66, 0x66, 0x3c, 0x60, 0xc0} },
	{ L'χ', {0x00, 0xe6, 0x3c, 0x18, 0x38, 0x6c, 0xc7, 0x00} },
	{ L'ω', {0x00, 0x00, 0x66, 0xc3, 0xdb, 0xdb, 0x7e, 0x00} },
	{ L'Ʃ', {0xfe, 0xc6, 0x60, 0x30, 0x60, 0xc6, 0xfe, 0x00} },
	{ L'Ω', {0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x6c, 0xee, 0x00} },

	//could not find equivalent for the diagonal lines at the corners
	//0xca
	{ L'⋄', {0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x66, 0x3c, 0x18} },
	{ L'╳', {0xc3, 0xe7, 0x7e, 0x3c, 0x3c, 0x7e, 0xe7, 0xc3} },
	{ L'╱', {0x03, 0x07, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0xc0} },
	{ L'╲', {0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0x03} },
	{ L'▩', {0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33} },
	{ L'▒', {0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55} },

	//0xd0
	{ L'▔', {0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00} },
	{ L'▕', {0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03} },
	{ L'▁', {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff} },
	{ L'▏', {0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0} },
	{ L'◤', {0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80} },
	{ L'◥', {0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01} },
	{ L'◢', {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff} },
	{ L'◣', {0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff} },
	//cannot find half tone versions of half blocks or angles.

	//0xe0
	{ L'☺', {0x7e, 0xff, 0x99, 0xff, 0xbd, 0xc3, 0xff, 0x7e} },
	{ L'☹', {0x7e, 0xff, 0x99, 0xff, 0xc3, 0xbd, 0xff, 0x7e} },
	{ L'♣', {0x38, 0x38, 0xfe, 0xfe, 0xfe, 0x10, 0x38, 0x00} },
	{ L'♦', {0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00} },
	{ L'♥', {0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00} },
	{ L'♠', {0x10, 0x38, 0x7c, 0xfe, 0xfe, 0x10, 0x38, 0x00} },
	{ L'⚪', {0x00, 0x3c, 0x66, 0xc3, 0xc3, 0x66, 0x3c, 0x00} },
	{ L'⚫', {0x00, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x3c, 0x00} },
	{ L'◻', {0x00, 0x7e, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00} },
	{ L'◼', {0x00, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x00} },
	{ L'♂', {0x0f, 0x07, 0x0d, 0x78, 0xcc, 0xcc, 0xcc, 0x78} },
	{ L'♀', {0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18} },
	{ L'♩', {0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x7c, 0x38} },
	{ L'♪', {0x18, 0x1c, 0x1e, 0x1b, 0x18, 0x78, 0xf8, 0x70} },
	{ L'💥', {0x99, 0x5a, 0x24, 0xc3, 0xc3, 0x24, 0x5a, 0x99} },
	{ L'🚀', {0x10, 0x38, 0x38, 0x38, 0x38, 0x38, 0x7c, 0xd6} },

	//0xf0
	{ L'⬆', {0x18, 0x3c, 0x7e, 0xff, 0x18, 0x18, 0x18, 0x18} },
	{ L'⬇', {0x18, 0x18, 0x18, 0x18, 0xff, 0x7e, 0x3c, 0x18} },
	{ L'⬅', {0x10, 0x30, 0x70, 0xff, 0xff, 0x70, 0x30, 0x10} },
	{ L'➡', {0x08, 0x0c, 0x0e, 0xff, 0xff, 0x0e, 0x0c, 0x08} },
	{ L'▲', {0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00} },
	{ L'▼', {0x00, 0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00} },
	{ L'▶', {0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00} },
	{ L'◀', {0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00} },
	//no unicode code points for the standing,blocking,walk left,walk right persons
	{ L'💣', {0x00, 0x3c, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00} },
	{ L'⛈', {0x3c, 0xff, 0xff, 0x18, 0x0c, 0x18, 0x30, 0x18} },
	{ L'↕', {0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18} },
	{ L'↔', {0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00} },

        //0x00
	{ L'⬜', {0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff} },
	{ L'⌜', {0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0} },
	{ L'⊥', {0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff} },
	{ L'⌟', {0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff} },
	{ L'⚡', {0x0c, 0x18, 0x30, 0x7e, 0x0c, 0x18, 0x30, 0x00} },
	{ L'⛝', {0xff, 0xc3, 0xe7, 0xdb, 0xdb, 0xe7, 0xc3, 0xff} },
	{ L'✓', {0x00, 0x01, 0x03, 0x06, 0xcc, 0x78, 0x30, 0x00} },
	{ L'⍾', {0x3c, 0x66, 0xc3, 0xc3, 0xff, 0x24, 0xe7, 0x00} },
	{ L'←', {0x00, 0x00, 0x30, 0x60, 0xff, 0x60, 0x30, 0x00} },
	{ L'→', {0x00, 0x00, 0x0c, 0x06, 0xff, 0x06, 0x0c, 0x00} },
	{ L'↓', {0x18, 0x18, 0x18, 0x18, 0xdb, 0x7e, 0x3c, 0x18} },
	{ L'↑', {0x18, 0x3c, 0x7e, 0xdb, 0x18, 0x18, 0x18, 0x18} },
	{ L'↡', {0x18, 0x5a, 0x3c, 0x99, 0xdb, 0x7e, 0x3c, 0x18} },
	{ L'↵', {0x00, 0x03, 0x33, 0x63, 0xfe, 0x60, 0x30, 0x00} },
	{ L'⊚', {0x3c, 0x66, 0xff, 0xdb, 0xdb, 0xff, 0x66, 0x3c} },
	{ L'⊙', {0x3c, 0x66, 0xc3, 0xdb, 0xdb, 0xc3, 0x66, 0x3c} },

	//0x10
	{ L'Ξ', {0xff, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0xff} },
	{ L'◷', {0x3c, 0x7e, 0xdb, 0xdb, 0xdf, 0xc3, 0x66, 0x3c} },
	{ L'◶', {0x3c, 0x66, 0xc3, 0xdf, 0xdb, 0xdb, 0x7e, 0x3c} },
	{ L'◵', {0x3c, 0x66, 0xc3, 0xfb, 0xdb, 0xdb, 0x7e, 0x3c} },
	{ L'◴', {0x3c, 0x7e, 0xdb, 0xdb, 0xfb, 0xc3, 0x66, 0x3c} },
	{ L'⍻', {0x00, 0x01, 0x33, 0x1e, 0xce, 0x7b, 0x31, 0x00} },
	{ L'Π', {0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xe7} },
	{ L'⊣', {0x03, 0x03, 0x03, 0xff, 0x03, 0x03, 0x03, 0x00} },
	{ L'⧖', {0xff, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xff} },
	{ L'⍿', {0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x3c, 0x18, 0x18} },
	{ L'⸮', {0x3c, 0x66, 0x66, 0x30, 0x18, 0x00, 0x18, 0x00} },
	{ L'Θ', {0x3c, 0x66, 0xc3, 0xff, 0xc3, 0xc3, 0x66, 0x3c} },
	{ L'◰', {0xff, 0xdb, 0xdb, 0xdb, 0xfb, 0xc3, 0xc3, 0xff} },
	{ L'◱', {0xff, 0xc3, 0xc3, 0xfb, 0xdb, 0xdb, 0xdb, 0xff} },
	{ L'◲', {0xff, 0xc3, 0xc3, 0xdf, 0xdb, 0xdb, 0xdb, 0xff} },
	{ L'◳', {0xff, 0xdb, 0xdb, 0xdb, 0xdf, 0xdb, 0xdb, 0xff} },

	//extras
	{ L'‘', {0x0c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00} },
	{ L'’', {0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00} },
	{ L'“', {0x36, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00} },
	{ L'”', {0x36, 0x36, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00} },


	{ L'Ä', {0x66, 0x18, 0x3c, 0x66, 0x7e, 0x66, 0x66, 0x00} },
	{ L'Ö', {0x66, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x00} },
	{ L'Ü', {0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00} },

	{ L'ä', {0x66, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00} },
	{ L'ö', {0x66, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00} },
	{ L'ü', {0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00} },

	{ L'ß', {0x7c, 0xc6, 0xc6, 0xdc, 0xc6, 0xc6, 0xd8, 0xc0} },

	{ L'€', {0x3c, 0x62, 0xfc, 0xc0, 0xfc, 0x62, 0x3c, 0x00} },
};

//output buffer is 0x60*4=0x180 elements
static void font_compile(uint32_t *buffer) {
	//four consecutive symbols go into one tile.
	//our source has 1x8 uint8_t/symbol, our destination has
	//2x8 uint32_t/tile
	unsigned i = 0;
	unsigned j = 0;
	while(i < sizeof(font_desc)/sizeof(font_desc[0])) {
		for(unsigned k = 0; k < 8; k++) {
			buffer[j+k*2+0] =
				((font_desc[i+k+ 0] & 0x80) >> 7) |
				((font_desc[i+k+ 8] & 0x80) >> 6) |
				((font_desc[i+k+16] & 0x80) >> 5) |
				((font_desc[i+k+24] & 0x80) >> 4) |
				((font_desc[i+k+ 0] & 0x40) >> 2) |
				((font_desc[i+k+ 8] & 0x40) >> 1) |
				((font_desc[i+k+16] & 0x40) >> 0) |
				((font_desc[i+k+24] & 0x40) << 1) |
				((font_desc[i+k+ 0] & 0x20) << 11) |
				((font_desc[i+k+ 8] & 0x20) << 12) |
				((font_desc[i+k+16] & 0x20) << 13) |
				((font_desc[i+k+24] & 0x20) << 14) |
				((font_desc[i+k+ 0] & 0x10) << 16) |
				((font_desc[i+k+ 8] & 0x10) << 17) |
				((font_desc[i+k+16] & 0x10) << 18) |
				((font_desc[i+k+24] & 0x10) << 19);
			buffer[j+k*2+1] =
				((font_desc[i+k+ 0] & 0x08) >> 3) |
				((font_desc[i+k+ 8] & 0x08) >> 2) |
				((font_desc[i+k+16] & 0x08) >> 1) |
				((font_desc[i+k+24] & 0x08) >> 0) |
				((font_desc[i+k+ 0] & 0x04) << 2) |
				((font_desc[i+k+ 8] & 0x04) << 3) |
				((font_desc[i+k+16] & 0x04) << 4) |
				((font_desc[i+k+24] & 0x04) << 5) |
				((font_desc[i+k+ 0] & 0x02) << 15) |
				((font_desc[i+k+ 8] & 0x02) << 16) |
				((font_desc[i+k+16] & 0x02) << 17) |
				((font_desc[i+k+24] & 0x02) << 18) |
				((font_desc[i+k+ 0] & 0x01) << 19) |
				((font_desc[i+k+ 8] & 0x01) << 20) |
				((font_desc[i+k+16] & 0x01) << 21) |
				((font_desc[i+k+24] & 0x01) << 22);
		}

		i += 1*8*4;
		j += 2*8;
	}
}

uint16_t font_tile_base;

uint16_t font_upload() {
	uint32_t buf[0x180];
	uint16_t position_after = 0x7C0-0x180;
	//try to allocate the memory, starting at the end.
	while(position_after < 0x7C0) {
		if (sprite_alloc_vmem(0x180, 0x10, position_after) ==
		    position_after)
			break;
		position_after -= 0x10;
	}
	if (position_after >= 0x7C0-0x180)
		return (uint16_t)~0U;
	font_tile_base = (position_after >> 4) - 8;
	font_compile(buf);
	FPGAComm_CopyToFPGA(FPGA_GRPH_SPRITES_RAM + 4*position_after,
			    buf, 0x180*4);
	return position_after;
}

struct TileInfo {
	wchar_t planes[4];
	uint16_t address;
};

struct CharToTileInfo {
	uint8_t tilenum:4;
	uint8_t bitplane:2;
};

static std::map<wchar_t, CharToTileInfo> chartotile;
//if 16*4=64 are not good enough, we need to think
//about dynamically assigning the normal character set. we are already
//using 16*16=256 vram addresses with these.
static TileInfo tilearray[16];

uint32_t _font_find_tile(wchar_t wc) {
	return 0x7f;
}
