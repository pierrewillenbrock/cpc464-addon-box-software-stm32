
#include <fpga/font.h>
#include <fpga/fpga_comm.hpp>
#include <fpga/layout.h>
#include <fpga/sprite.h>

static uint8_t const font_desc[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //' '
	0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00, //'!'
	0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
	0x18, 0x3e, 0x58, 0x3c, 0x1a, 0x7c, 0x18, 0x00,
	0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
	0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
	0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
	0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00,
	0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
	0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30,
	0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
	0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
	0x7c, 0xc6, 0xce, 0xd6, 0xe6, 0xc6, 0x7c, 0x00, //'0'
	0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00,
	0x3c, 0x66, 0x06, 0x3c, 0x60, 0x66, 0x7e, 0x00,
	0x3c, 0x66, 0x06, 0x1c, 0x06, 0x66, 0x3c, 0x00,
	0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
	0x7e, 0x62, 0x60, 0x7c, 0x06, 0x66, 0x3c, 0x00,
	0x3c, 0x66, 0x60, 0x7c, 0x66, 0x66, 0x3c, 0x00,
	0x7e, 0x66, 0x06, 0x0c, 0x18, 0x18, 0x18, 0x00,
	0x3c, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x00,
	0x3c, 0x66, 0x66, 0x3e, 0x06, 0x66, 0x3c, 0x00, //'9'
	0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00,
	0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30,
	0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00,
	0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00,
	0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
	0x3c, 0x66, 0x66, 0x0c, 0x18, 0x00, 0x18, 0x00,
	0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x7c, 0x00, //'@'
	0x18, 0x3c, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x00, //'A'
	0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
	0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
	0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
	0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
	0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
	0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
	0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00,
	0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00,
	0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
	0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
	0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
	0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
	0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
	0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
	0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
	0x38, 0x6c, 0xc6, 0xc6, 0xda, 0xcc, 0x76, 0x00,
	0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
	0x3c, 0x66, 0x60, 0x3c, 0x06, 0x66, 0x3c, 0x00,
	0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
	0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
	0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
	0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x00,
	0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00, //'Z'
	0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00,
	0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
	0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00,
	0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
	0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00, //'a'
	0xe0, 0x60, 0x7c, 0x66, 0x66, 0x66, 0xdc, 0x00,
	0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x00,
	0x1c, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
	0x00, 0x00, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
	0x1c, 0x36, 0x30, 0x78, 0x30, 0x30, 0x78, 0x00,
	0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x7c,
	0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
	0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
	0x06, 0x00, 0x0e, 0x06, 0x06, 0x66, 0x66, 0x3c,
	0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
	0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00,
	0x00, 0x00, 0x6c, 0xfe, 0xd6, 0xd6, 0xc6, 0x00,
	0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x00,
	0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00,
	0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
	0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
	0x00, 0x00, 0xdc, 0x76, 0x60, 0x60, 0xf0, 0x00,
	0x00, 0x00, 0x3c, 0x60, 0x3c, 0x06, 0x7c, 0x00,
	0x30, 0x30, 0x7c, 0x30, 0x30, 0x36, 0x1c, 0x00,
	0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00,
	0x00, 0x00, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
	0x00, 0x00, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00,
	0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
	0x00, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x06, 0x7c,
	0x00, 0x00, 0x7e, 0x4c, 0x18, 0x32, 0x7e, 0x00, //'z'
	0x0e, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0e, 0x00,
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
	0x70, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x70, 0x00,
	0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xcc, 0x33, 0xcc, 0x33, 0xcc, 0x33, 0xcc, 0x33,
};

//output buffer is 0x60*4=0x180 elements
static void font_compile(uint32_t *buffer) {
	//four consecutive symbols go into one tile.
	//our source has 1x8 uint8_t/symbol, our destination has
	//2x8 uint32_t/tile
	unsigned i = 0;
	unsigned j = 0;
	while(i < sizeof(font_desc)/sizeof(font_desc[0])) {
		for(unsigned k = 0; k < 8; k++) {
			buffer[j+k*2+0] =
				((font_desc[i+k+ 0] & 0x80) >> 7) |
				((font_desc[i+k+ 8] & 0x80) >> 6) |
				((font_desc[i+k+16] & 0x80) >> 5) |
				((font_desc[i+k+24] & 0x80) >> 4) |
				((font_desc[i+k+ 0] & 0x40) >> 2) |
				((font_desc[i+k+ 8] & 0x40) >> 1) |
				((font_desc[i+k+16] & 0x40) >> 0) |
				((font_desc[i+k+24] & 0x40) << 1) |
				((font_desc[i+k+ 0] & 0x20) << 11) |
				((font_desc[i+k+ 8] & 0x20) << 12) |
				((font_desc[i+k+16] & 0x20) << 13) |
				((font_desc[i+k+24] & 0x20) << 14) |
				((font_desc[i+k+ 0] & 0x10) << 16) |
				((font_desc[i+k+ 8] & 0x10) << 17) |
				((font_desc[i+k+16] & 0x10) << 18) |
				((font_desc[i+k+24] & 0x10) << 19);
			buffer[j+k*2+1] =
				((font_desc[i+k+ 0] & 0x08) >> 3) |
				((font_desc[i+k+ 8] & 0x08) >> 2) |
				((font_desc[i+k+16] & 0x08) >> 1) |
				((font_desc[i+k+24] & 0x08) >> 0) |
				((font_desc[i+k+ 0] & 0x04) << 2) |
				((font_desc[i+k+ 8] & 0x04) << 3) |
				((font_desc[i+k+16] & 0x04) << 4) |
				((font_desc[i+k+24] & 0x04) << 5) |
				((font_desc[i+k+ 0] & 0x02) << 15) |
				((font_desc[i+k+ 8] & 0x02) << 16) |
				((font_desc[i+k+16] & 0x02) << 17) |
				((font_desc[i+k+24] & 0x02) << 18) |
				((font_desc[i+k+ 0] & 0x01) << 19) |
				((font_desc[i+k+ 8] & 0x01) << 20) |
				((font_desc[i+k+16] & 0x01) << 21) |
				((font_desc[i+k+24] & 0x01) << 22);
		}

		i += 1*8*4;
		j += 2*8;
	}
}

uint16_t font_tile_base;

uint16_t font_upload() {
	uint32_t buf[0x180];
	uint16_t position_after = 0x7C0-0x180;
	//try to allocate the memory, starting at the end.
	while(position_after < 0x7C0) {
		if (sprite_alloc_vmem(0x180, 0x10, position_after) ==
		    position_after)
			break;
		position_after -= 0x10;
	}
	if (position_after >= 0x7C0-0x180)
		return (uint16_t)~0U;
	font_tile_base = (position_after >> 4) - 8;
	font_compile(buf);
	FPGAComm_CopyToFPGA(FPGA_GRPH_SPRITES_RAM + 4*position_after,
			    buf, 0x180*4);
	return position_after;
}

