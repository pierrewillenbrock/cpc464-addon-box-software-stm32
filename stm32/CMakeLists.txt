project(STM32)
cmake_minimum_required(VERSION 2.6)

#needs to be set from outside to work
#set(CMAKE_TOOLCHAIN_FILE  CodeSourcery.cmake)

set(COMPILE_DEFINITIONS_DEBUG    -O1 -ggdb)
set(COMPILE_DEFINITIONS_RELEASE  -O1)

add_definitions(
  -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DUSE_FULL_ASSERT
  -DHSE_VALUE=16000000
  )

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -mcpu=cortex-m4 -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16 -fno-unwind-tables -fno-common -fno-exceptions -fno-rtti -fdata-sections -ffunction-sections -std=c++11"
  )

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -mcpu=cortex-m4 -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16 -fno-unwind-tables -fno-common -fno-exceptions -fdata-sections -ffunction-sections"
  )

function(enable_unity_build UB_SUFFIX SOURCE_VARIABLE_NAME)
  set(files ${${SOURCE_VARIABLE_NAME}})
  # Generate a unique filename for the unity build translation unit
  set(unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UB_SUFFIX}.cpp)
  # Exclude all translation units from compilation
  set_source_files_properties(${files} PROPERTIES HEADER_FILE_ONLY true)
  # Open the ub file
  FILE(WRITE ${unit_build_file} "// Unity Build generated by CMake\n")
  # Add include statement for each translation unit
  foreach(source_file ${files} )
    if("${source_file}" MATCHES "\\.c$")
      FILE( APPEND ${unit_build_file} "extern \"C\" { \n")
      FILE( APPEND ${unit_build_file} "#include <${CMAKE_CURRENT_SOURCE_DIR}/${source_file}>\n")
      FILE( APPEND ${unit_build_file} "}\n")
    else()
      FILE( APPEND ${unit_build_file} "#include <${CMAKE_CURRENT_SOURCE_DIR}/${source_file}>\n")
    endif()
  endforeach(source_file)
  # Complement list of translation units with the name of ub
  set(${SOURCE_VARIABLE_NAME} ${${SOURCE_VARIABLE_NAME}} ${unit_build_file} PARENT_SCOPE)
endfunction(enable_unity_build)

include_directories(
  include
  )

set(TESTER_CSRCS
  src/tester.cpp
  src/sys/syscallscommon.c
  src/sys/syscallstester.c
  src/sys/assert.c
  src/bsp/system_stm32f4xx.c
  src/bsp/stm32f4xx_gpio.c
  src/bsp/stm32f4xx_rcc.c
  src/bsp/stm32f4xx_spi.c
  src/bsp/stm32f4xx_tim.c
  )

set(MAIN_CSRCS
  src/main.cpp
  src/timer.cpp
  src/fpga/fpga_comm.cpp
  src/block/sdio.c
  src/block/sdcard.cpp
  src/block/msd.cpp
  src/fs/fat.cpp
  src/sys/syscallscommon.c
  src/sys/syscallscpp.cpp
  src/sys/cppsupport.cpp
  src/sys/assert.c
  src/fpga/font.c
  src/fdc/fdc.cpp
  src/fdc/dsk.cpp
  src/usb/usb.cpp
  src/usb/usbchannel.cpp
  src/usb/usbdevice.cpp
  src/lang.cpp
  src/bsp/system_stm32f4xx.c
#  src/bsp/stm32f4xx_crc.c
#  src/bsp/stm32f4xx_dbgmcu.c
  src/bsp/stm32f4xx_dma.c
  src/bsp/stm32f4xx_exti.c
  src/bsp/stm32f4xx_flash.c
  src/bsp/stm32f4xx_gpio.c
  src/bsp/stm32f4xx_rcc.c
#  src/bsp/stm32f4xx_rng.c
#  src/bsp/stm32f4xx_rtc.c
  src/bsp/stm32f4xx_sdio.c
  src/bsp/stm32f4xx_spi.c
  src/bsp/stm32f4xx_syscfg.c
#  src/bsp/stm32f4xx_tim.c
  src/bsp/misc.c
  )

#enable_unity_build(ubtester TESTER_CSRCS)
#enable_unity_build(ubmain MAIN_CSRCS)

enable_language(ASM)

add_executable(tester
  src/bsp/startup_stm32f40xx.s
  ${TESTER_CSRCS}
  )

add_executable(main
  src/bsp/startup_stm32f40xx.s
  ${MAIN_CSRCS}
  )

set_target_properties(main PROPERTIES
  LINK_DEPENDS "${STM32_SOURCE_DIR}/link.ld"
  LINK_FLAGS "-T \"${STM32_SOURCE_DIR}/link.ld\" -nostartfiles -mcpu=cortex-m4 -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16 -O2 -Wl,--gc-section")

set_target_properties(tester PROPERTIES
  LINK_DEPENDS "${STM32_SOURCE_DIR}/link.ld"
  LINK_FLAGS "-T \"${STM32_SOURCE_DIR}/link.ld\" -nostartfiles -mcpu=cortex-m4 -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16 -O2 -Wl,--gc-section")

